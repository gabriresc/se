
Aviao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e78  08002e78  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002e78  08002e78  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e78  08002e78  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000080  08002f00  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002f00  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007149  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001500  00000000  00000000  000271f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a8  00000000  00000000  000286f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  00028da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016018  00000000  00000000  00029390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005dbb  00000000  00000000  0003f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081d42  00000000  00000000  00045163  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc0  00000000  00000000  000c6f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08002d78 	.word	0x08002d78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08002d78 	.word	0x08002d78

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	//ST7789_Select();
	ST7789_DC_Clr();
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <ST7789_WriteCommand+0x2c>)
 8000ac8:	f001 f922 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000acc:	1df9      	adds	r1, r7, #7
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <ST7789_WriteCommand+0x30>)
 8000ad6:	f001 fda1 	bl	800261c <HAL_SPI_Transmit>
	//ST7789_UnSelect();
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	200000ac 	.word	0x200000ac

08000aec <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	//ST7789_Select();
	ST7789_DC_Set();
 8000af6:	2201      	movs	r2, #1
 8000af8:	2101      	movs	r1, #1
 8000afa:	4810      	ldr	r0, [pc, #64]	; (8000b3c <ST7789_WriteData+0x50>)
 8000afc:	f001 f908 	bl	8001d10 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000b00:	e015      	b.n	8000b2e <ST7789_WriteData+0x42>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	bf28      	it	cs
 8000b0c:	4613      	movcs	r3, r2
 8000b0e:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000b10:	89fa      	ldrh	r2, [r7, #14]
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <ST7789_WriteData+0x54>)
 8000b1a:	f001 fd7f 	bl	800261c <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1e6      	bne.n	8000b02 <ST7789_WriteData+0x16>
	}

	//ST7789_UnSelect();
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	200000ac 	.word	0x200000ac

08000b44 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2110      	movs	r1, #16
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <ST7789_WriteSmallData+0x40>)
 8000b54:	f001 f8dc 	bl	8001d10 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <ST7789_WriteSmallData+0x44>)
 8000b5e:	f001 f8d7 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000b62:	1df9      	adds	r1, r7, #7
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <ST7789_WriteSmallData+0x48>)
 8000b6c:	f001 fd56 	bl	800261c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000b70:	2201      	movs	r2, #1
 8000b72:	2110      	movs	r1, #16
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <ST7789_WriteSmallData+0x40>)
 8000b76:	f001 f8cb 	bl	8001d10 <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	200000ac 	.word	0x200000ac

08000b90 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000b9a:	2036      	movs	r0, #54	; 0x36
 8000b9c:	f7ff ff8c 	bl	8000ab8 <ST7789_WriteCommand>
	switch (m) {
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d81a      	bhi.n	8000bdc <ST7789_SetRotation+0x4c>
 8000ba6:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <ST7789_SetRotation+0x1c>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000bbd 	.word	0x08000bbd
 8000bb0:	08000bc5 	.word	0x08000bc5
 8000bb4:	08000bcd 	.word	0x08000bcd
 8000bb8:	08000bd5 	.word	0x08000bd5
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000bbc:	20c0      	movs	r0, #192	; 0xc0
 8000bbe:	f7ff ffc1 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bc2:	e00c      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000bc4:	20a0      	movs	r0, #160	; 0xa0
 8000bc6:	f7ff ffbd 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bca:	e008      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ffb9 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bd2:	e004      	b.n	8000bde <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000bd4:	2060      	movs	r0, #96	; 0x60
 8000bd6:	f7ff ffb5 	bl	8000b44 <ST7789_WriteSmallData>
		break;
 8000bda:	e000      	b.n	8000bde <ST7789_SetRotation+0x4e>
	default:
		break;
 8000bdc:	bf00      	nop
	}
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop

08000be8 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
 8000c02:	4613      	mov	r3, r2
 8000c04:	803b      	strh	r3, [r7, #0]
	//ST7789_Select();
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	82fb      	strh	r3, [r7, #22]
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000c0e:	88bb      	ldrh	r3, [r7, #4]
 8000c10:	827b      	strh	r3, [r7, #18]
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000c16:	202a      	movs	r0, #42	; 0x2a
 8000c18:	f7ff ff4e 	bl	8000ab8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000c1c:	8afb      	ldrh	r3, [r7, #22]
 8000c1e:	0a1b      	lsrs	r3, r3, #8
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	733b      	strb	r3, [r7, #12]
 8000c26:	8afb      	ldrh	r3, [r7, #22]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	737b      	strb	r3, [r7, #13]
 8000c2c:	8abb      	ldrh	r3, [r7, #20]
 8000c2e:	0a1b      	lsrs	r3, r3, #8
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	73bb      	strb	r3, [r7, #14]
 8000c36:	8abb      	ldrh	r3, [r7, #20]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2104      	movs	r1, #4
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff52 	bl	8000aec <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000c48:	202b      	movs	r0, #43	; 0x2b
 8000c4a:	f7ff ff35 	bl	8000ab8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000c4e:	8a7b      	ldrh	r3, [r7, #18]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	723b      	strb	r3, [r7, #8]
 8000c58:	8a7b      	ldrh	r3, [r7, #18]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	727b      	strb	r3, [r7, #9]
 8000c5e:	8a3b      	ldrh	r3, [r7, #16]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	72bb      	strb	r3, [r7, #10]
 8000c68:	8a3b      	ldrh	r3, [r7, #16]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2104      	movs	r1, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff39 	bl	8000aec <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000c7a:	202c      	movs	r0, #44	; 0x2c
 8000c7c:	f7ff ff1c 	bl	8000ab8 <ST7789_WriteCommand>
	//ST7789_UnSelect();
}
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd90      	pop	{r4, r7, pc}

08000c88 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
 8000c8c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 8000c8e:	2019      	movs	r0, #25
 8000c90:	f000 fdde 	bl	8001850 <HAL_Delay>
    ST7789_RST_Clr();
 8000c94:	2200      	movs	r2, #0
 8000c96:	2102      	movs	r1, #2
 8000c98:	4846      	ldr	r0, [pc, #280]	; (8000db4 <ST7789_Init+0x12c>)
 8000c9a:	f001 f839 	bl	8001d10 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8000c9e:	2019      	movs	r0, #25
 8000ca0:	f000 fdd6 	bl	8001850 <HAL_Delay>
    ST7789_RST_Set();
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4842      	ldr	r0, [pc, #264]	; (8000db4 <ST7789_Init+0x12c>)
 8000caa:	f001 f831 	bl	8001d10 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000cae:	2032      	movs	r0, #50	; 0x32
 8000cb0:	f000 fdce 	bl	8001850 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000cb4:	203a      	movs	r0, #58	; 0x3a
 8000cb6:	f7ff feff 	bl	8000ab8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000cba:	2055      	movs	r0, #85	; 0x55
 8000cbc:	f7ff ff42 	bl	8000b44 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000cc0:	20b2      	movs	r0, #178	; 0xb2
 8000cc2:	f7ff fef9 	bl	8000ab8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000cc6:	4a3c      	ldr	r2, [pc, #240]	; (8000db8 <ST7789_Init+0x130>)
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd0:	6018      	str	r0, [r3, #0]
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	2105      	movs	r1, #5
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff05 	bl	8000aec <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f7ff ff54 	bl	8000b90 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000ce8:	20b7      	movs	r0, #183	; 0xb7
 8000cea:	f7ff fee5 	bl	8000ab8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000cee:	2035      	movs	r0, #53	; 0x35
 8000cf0:	f7ff ff28 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000cf4:	20bb      	movs	r0, #187	; 0xbb
 8000cf6:	f7ff fedf 	bl	8000ab8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f7ff ff22 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000d00:	20c0      	movs	r0, #192	; 0xc0
 8000d02:	f7ff fed9 	bl	8000ab8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000d06:	202c      	movs	r0, #44	; 0x2c
 8000d08:	f7ff ff1c 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000d0c:	20c2      	movs	r0, #194	; 0xc2
 8000d0e:	f7ff fed3 	bl	8000ab8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff ff16 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000d18:	20c3      	movs	r0, #195	; 0xc3
 8000d1a:	f7ff fecd 	bl	8000ab8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000d1e:	2012      	movs	r0, #18
 8000d20:	f7ff ff10 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000d24:	20c4      	movs	r0, #196	; 0xc4
 8000d26:	f7ff fec7 	bl	8000ab8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000d2a:	2020      	movs	r0, #32
 8000d2c:	f7ff ff0a 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000d30:	20c6      	movs	r0, #198	; 0xc6
 8000d32:	f7ff fec1 	bl	8000ab8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000d36:	200f      	movs	r0, #15
 8000d38:	f7ff ff04 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000d3c:	20d0      	movs	r0, #208	; 0xd0
 8000d3e:	f7ff febb 	bl	8000ab8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000d42:	20a4      	movs	r0, #164	; 0xa4
 8000d44:	f7ff fefe 	bl	8000b44 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000d48:	20a1      	movs	r0, #161	; 0xa1
 8000d4a:	f7ff fefb 	bl	8000b44 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8000d4e:	20e0      	movs	r0, #224	; 0xe0
 8000d50:	f7ff feb2 	bl	8000ab8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <ST7789_Init+0x134>)
 8000d56:	f107 0410 	add.w	r4, r7, #16
 8000d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d5c:	c407      	stmia	r4!, {r0, r1, r2}
 8000d5e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	210e      	movs	r1, #14
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fec0 	bl	8000aec <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000d6c:	20e1      	movs	r0, #225	; 0xe1
 8000d6e:	f7ff fea3 	bl	8000ab8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <ST7789_Init+0x138>)
 8000d74:	463c      	mov	r4, r7
 8000d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d78:	c407      	stmia	r4!, {r0, r1, r2}
 8000d7a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	210e      	movs	r1, #14
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff feb3 	bl	8000aec <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000d86:	2021      	movs	r0, #33	; 0x21
 8000d88:	f7ff fe96 	bl	8000ab8 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000d8c:	2011      	movs	r0, #17
 8000d8e:	f7ff fe93 	bl	8000ab8 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000d92:	2013      	movs	r0, #19
 8000d94:	f7ff fe90 	bl	8000ab8 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000d98:	2029      	movs	r0, #41	; 0x29
 8000d9a:	f7ff fe8d 	bl	8000ab8 <ST7789_WriteCommand>

	HAL_Delay(50);
 8000d9e:	2032      	movs	r0, #50	; 0x32
 8000da0:	f000 fd56 	bl	8001850 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 f80d 	bl	8000dc4 <ST7789_Fill_Color>
}
 8000daa:	bf00      	nop
 8000dac:	372c      	adds	r7, #44	; 0x2c
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	08002d90 	.word	0x08002d90
 8000dbc:	08002d98 	.word	0x08002d98
 8000dc0:	08002da8 	.word	0x08002da8

08000dc4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8000dce:	23ef      	movs	r3, #239	; 0xef
 8000dd0:	22ef      	movs	r2, #239	; 0xef
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ff07 	bl	8000be8 <ST7789_SetAddressWindow>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	81fb      	strh	r3, [r7, #14]
 8000dde:	e019      	b.n	8000e14 <ST7789_Fill_Color+0x50>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000de0:	2300      	movs	r3, #0
 8000de2:	81bb      	strh	r3, [r7, #12]
 8000de4:	e010      	b.n	8000e08 <ST7789_Fill_Color+0x44>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	723b      	strb	r3, [r7, #8]
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe75 	bl	8000aec <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000e02:	89bb      	ldrh	r3, [r7, #12]
 8000e04:	3301      	adds	r3, #1
 8000e06:	81bb      	strh	r3, [r7, #12]
 8000e08:	89bb      	ldrh	r3, [r7, #12]
 8000e0a:	2bef      	cmp	r3, #239	; 0xef
 8000e0c:	d9eb      	bls.n	8000de6 <ST7789_Fill_Color+0x22>
		for (i = 0; i < ST7789_WIDTH; i++)
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	3301      	adds	r3, #1
 8000e12:	81fb      	strh	r3, [r7, #14]
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	2bef      	cmp	r3, #239	; 0xef
 8000e18:	d9e2      	bls.n	8000de0 <ST7789_Fill_Color+0x1c>
				}
	#endif
	//ALGG ST7789_UnSelect();
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	80fb      	strh	r3, [r7, #6]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	80bb      	strh	r3, [r7, #4]
 8000e30:	4613      	mov	r3, r2
 8000e32:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	2bef      	cmp	r3, #239	; 0xef
 8000e38:	d817      	bhi.n	8000e6a <ST7789_DrawPixel+0x48>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	2bef      	cmp	r3, #239	; 0xef
 8000e3e:	d814      	bhi.n	8000e6a <ST7789_DrawPixel+0x48>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	88fa      	ldrh	r2, [r7, #6]
 8000e44:	88b9      	ldrh	r1, [r7, #4]
 8000e46:	88f8      	ldrh	r0, [r7, #6]
 8000e48:	f7ff fece 	bl	8000be8 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8000e4c:	887b      	ldrh	r3, [r7, #2]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	733b      	strb	r3, [r7, #12]
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	737b      	strb	r3, [r7, #13]
	//ST7789_Select();
	ST7789_WriteData(data, sizeof(data));
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2102      	movs	r1, #2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe42 	bl	8000aec <ST7789_WriteData>
 8000e68:	e000      	b.n	8000e6c <ST7789_DrawPixel+0x4a>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000e6a:	bf00      	nop
	//ST7789_UnSelect();
}
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000e72:	b590      	push	{r4, r7, lr}
 8000e74:	b087      	sub	sp, #28
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4604      	mov	r4, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4623      	mov	r3, r4
 8000e82:	80fb      	strh	r3, [r7, #6]
 8000e84:	4603      	mov	r3, r0
 8000e86:	80bb      	strh	r3, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000e90:	883a      	ldrh	r2, [r7, #0]
 8000e92:	88bb      	ldrh	r3, [r7, #4]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e9a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e9e:	8879      	ldrh	r1, [r7, #2]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bfb8      	it	lt
 8000ea8:	425b      	neglt	r3, r3
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	bfcc      	ite	gt
 8000eae:	2301      	movgt	r3, #1
 8000eb0:	2300      	movle	r3, #0
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8000eb6:	8a7b      	ldrh	r3, [r7, #18]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00b      	beq.n	8000ed4 <ST7789_DrawLine+0x62>
		swap = x0;
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8000ec4:	8a3b      	ldrh	r3, [r7, #16]
 8000ec6:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8000ecc:	883b      	ldrh	r3, [r7, #0]
 8000ece:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8000ed0:	8a3b      	ldrh	r3, [r7, #16]
 8000ed2:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8000ed4:	88fa      	ldrh	r2, [r7, #6]
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90b      	bls.n	8000ef4 <ST7789_DrawLine+0x82>
		swap = x0;
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8000ee4:	8a3b      	ldrh	r3, [r7, #16]
 8000ee6:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8000eec:	883b      	ldrh	r3, [r7, #0]
 8000eee:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8000ef0:	8a3b      	ldrh	r3, [r7, #16]
 8000ef2:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000ef4:	887a      	ldrh	r2, [r7, #2]
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8000efe:	883a      	ldrh	r2, [r7, #0]
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bfb8      	it	lt
 8000f08:	425b      	neglt	r3, r3
 8000f0a:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000f0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f10:	0fda      	lsrs	r2, r3, #31
 8000f12:	4413      	add	r3, r2
 8000f14:	105b      	asrs	r3, r3, #1
 8000f16:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8000f18:	88ba      	ldrh	r2, [r7, #4]
 8000f1a:	883b      	ldrh	r3, [r7, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d202      	bcs.n	8000f26 <ST7789_DrawLine+0xb4>
        ystep = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	82bb      	strh	r3, [r7, #20]
 8000f24:	e028      	b.n	8000f78 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 8000f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2a:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000f2c:	e024      	b.n	8000f78 <ST7789_DrawLine+0x106>
        if (steep) {
 8000f2e:	8a7b      	ldrh	r3, [r7, #18]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 8000f34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f36:	88f9      	ldrh	r1, [r7, #6]
 8000f38:	88bb      	ldrh	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff71 	bl	8000e22 <ST7789_DrawPixel>
 8000f40:	e005      	b.n	8000f4e <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000f42:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f44:	88b9      	ldrh	r1, [r7, #4]
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff6a 	bl	8000e22 <ST7789_DrawPixel>
        }
        err -= dy;
 8000f4e:	8afa      	ldrh	r2, [r7, #22]
 8000f50:	89bb      	ldrh	r3, [r7, #12]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8000f58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	da08      	bge.n	8000f72 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8000f60:	8aba      	ldrh	r2, [r7, #20]
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000f68:	8afa      	ldrh	r2, [r7, #22]
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	3301      	adds	r3, #1
 8000f76:	80fb      	strh	r3, [r7, #6]
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d9d6      	bls.n	8000f2e <ST7789_DrawLine+0xbc>
        }
    }
}
 8000f80:	bf00      	nop
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}

08000f88 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4604      	mov	r4, r0
 8000f90:	4608      	mov	r0, r1
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4623      	mov	r3, r4
 8000f98:	80fb      	strh	r3, [r7, #6]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80bb      	strh	r3, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	807b      	strh	r3, [r7, #2]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	803b      	strh	r3, [r7, #0]
	//ST7789_Select();
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	2bef      	cmp	r3, #239	; 0xef
 8000faa:	d835      	bhi.n	8001018 <ST7789_DrawFilledRectangle+0x90>
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	2bef      	cmp	r3, #239	; 0xef
 8000fb0:	d832      	bhi.n	8001018 <ST7789_DrawFilledRectangle+0x90>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8000fb2:	88fa      	ldrh	r2, [r7, #6]
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	2bef      	cmp	r3, #239	; 0xef
 8000fba:	dd03      	ble.n	8000fc4 <ST7789_DrawFilledRectangle+0x3c>
		w = ST7789_WIDTH - x;
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000fc2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8000fc4:	88ba      	ldrh	r2, [r7, #4]
 8000fc6:	883b      	ldrh	r3, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	2bef      	cmp	r3, #239	; 0xef
 8000fcc:	dd03      	ble.n	8000fd6 <ST7789_DrawFilledRectangle+0x4e>
		h = ST7789_HEIGHT - y;
 8000fce:	88bb      	ldrh	r3, [r7, #4]
 8000fd0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000fd4:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	//ST7789_Select();
	for (i = 0; i <= h; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e017      	b.n	800100c <ST7789_DrawFilledRectangle+0x84>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	88fa      	ldrh	r2, [r7, #6]
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	4413      	add	r3, r2
 8000fec:	b29c      	uxth	r4, r3
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	88f8      	ldrh	r0, [r7, #6]
 8000ffa:	8c3b      	ldrh	r3, [r7, #32]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	4613      	mov	r3, r2
 8001000:	4622      	mov	r2, r4
 8001002:	f7ff ff36 	bl	8000e72 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	3301      	adds	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	b29b      	uxth	r3, r3
 8001010:	883a      	ldrh	r2, [r7, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d2e2      	bcs.n	8000fdc <ST7789_DrawFilledRectangle+0x54>
 8001016:	e000      	b.n	800101a <ST7789_DrawFilledRectangle+0x92>
		return;
 8001018:	bf00      	nop
	}
	//ST7789_UnSelect();
	//ST7789_UnSelect();
}
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	b08b      	sub	sp, #44	; 0x2c
 8001024:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fbb1 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f9cb 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 fa41 	bl	80014b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001032:	f000 fa09 	bl	8001448 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8001036:	f7ff fe27 	bl	8000c88 <ST7789_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ST7789_Fill_Color(BLUE);
 800103a:	201f      	movs	r0, #31
 800103c:	f7ff fec2 	bl	8000dc4 <ST7789_Fill_Color>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  posicaodoalvo = 168 + (srand()%49);
 8001040:	f001 fd00 	bl	8002a44 <srand>
 8001044:	4601      	mov	r1, r0
 8001046:	4b6e      	ldr	r3, [pc, #440]	; (8001200 <main+0x1e0>)
 8001048:	fb83 2301 	smull	r2, r3, r3, r1
 800104c:	111a      	asrs	r2, r3, #4
 800104e:	17cb      	asrs	r3, r1, #31
 8001050:	1ad2      	subs	r2, r2, r3
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	00da      	lsls	r2, r3, #3
 800105a:	1ad2      	subs	r2, r2, r3
 800105c:	1a8a      	subs	r2, r1, r2
 800105e:	f102 03a8 	add.w	r3, r2, #168	; 0xa8
 8001062:	4a68      	ldr	r2, [pc, #416]	; (8001204 <main+0x1e4>)
 8001064:	6013      	str	r3, [r2, #0]
	  ST7789_DrawFilledRectangle(1, 239, 239 , 2, GREEN);
 8001066:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2302      	movs	r3, #2
 800106e:	22ef      	movs	r2, #239	; 0xef
 8001070:	21ef      	movs	r1, #239	; 0xef
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff ff88 	bl	8000f88 <ST7789_DrawFilledRectangle>
	  ST7789_DrawFilledRectangle(posicaodoalvo, 235, 8, 3, WHITE);
 8001078:	4b62      	ldr	r3, [pc, #392]	; (8001204 <main+0x1e4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	b298      	uxth	r0, r3
 800107e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2303      	movs	r3, #3
 8001086:	2208      	movs	r2, #8
 8001088:	21eb      	movs	r1, #235	; 0xeb
 800108a:	f7ff ff7d 	bl	8000f88 <ST7789_DrawFilledRectangle>

	  tempodequeda = sqrt((2*altura)/10);
 800108e:	4b5e      	ldr	r3, [pc, #376]	; (8001208 <main+0x1e8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4a5d      	ldr	r2, [pc, #372]	; (800120c <main+0x1ec>)
 8001096:	fb82 1203 	smull	r1, r2, r2, r3
 800109a:	1092      	asrs	r2, r2, #2
 800109c:	17db      	asrs	r3, r3, #31
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f9a7 	bl	80003f4 <__aeabi_i2d>
 80010a6:	4603      	mov	r3, r0
 80010a8:	460c      	mov	r4, r1
 80010aa:	4618      	mov	r0, r3
 80010ac:	4621      	mov	r1, r4
 80010ae:	f001 fd61 	bl	8002b74 <sqrt>
 80010b2:	4603      	mov	r3, r0
 80010b4:	460c      	mov	r4, r1
 80010b6:	4a56      	ldr	r2, [pc, #344]	; (8001210 <main+0x1f0>)
 80010b8:	e9c2 3400 	strd	r3, r4, [r2]
	  posicaodolancamento = posicaodoalvo-vo*tempodequeda;
 80010bc:	4b51      	ldr	r3, [pc, #324]	; (8001204 <main+0x1e4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f997 	bl	80003f4 <__aeabi_i2d>
 80010c6:	4605      	mov	r5, r0
 80010c8:	460e      	mov	r6, r1
 80010ca:	4b52      	ldr	r3, [pc, #328]	; (8001214 <main+0x1f4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f990 	bl	80003f4 <__aeabi_i2d>
 80010d4:	4b4e      	ldr	r3, [pc, #312]	; (8001210 <main+0x1f0>)
 80010d6:	cb18      	ldmia	r3, {r3, r4}
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	f7ff f9f4 	bl	80004c8 <__aeabi_dmul>
 80010e0:	4603      	mov	r3, r0
 80010e2:	460c      	mov	r4, r1
 80010e4:	461a      	mov	r2, r3
 80010e6:	4623      	mov	r3, r4
 80010e8:	4628      	mov	r0, r5
 80010ea:	4631      	mov	r1, r6
 80010ec:	f7ff f834 	bl	8000158 <__aeabi_dsub>
 80010f0:	4603      	mov	r3, r0
 80010f2:	460c      	mov	r4, r1
 80010f4:	4618      	mov	r0, r3
 80010f6:	4621      	mov	r1, r4
 80010f8:	f7ff fc96 	bl	8000a28 <__aeabi_d2iz>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4b46      	ldr	r3, [pc, #280]	; (8001218 <main+0x1f8>)
 8001100:	601a      	str	r2, [r3, #0]
	  if(posicaodolancamento<0){
 8001102:	4b45      	ldr	r3, [pc, #276]	; (8001218 <main+0x1f8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da00      	bge.n	800110c <main+0xec>
		  while(1);
 800110a:	e7fe      	b.n	800110a <main+0xea>
	  }
	  altura = 240-altura;
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <main+0x1e8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001114:	4a3c      	ldr	r2, [pc, #240]	; (8001208 <main+0x1e8>)
 8001116:	6013      	str	r3, [r2, #0]
	  int posicaoaviao=0;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
	  while(posicaoaviao<=posicaodolancamento-15){
 800111c:	e01c      	b.n	8001158 <main+0x138>
		  ST7789_DrawFilledRectangle(posicaoaviao, altura, 18, 8, BLUE);
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	b298      	uxth	r0, r3
 8001122:	4b39      	ldr	r3, [pc, #228]	; (8001208 <main+0x1e8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b299      	uxth	r1, r3
 8001128:	231f      	movs	r3, #31
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2308      	movs	r3, #8
 800112e:	2212      	movs	r2, #18
 8001130:	f7ff ff2a 	bl	8000f88 <ST7789_DrawFilledRectangle>
		  posicaoaviao+=2;
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	3302      	adds	r3, #2
 8001138:	61fb      	str	r3, [r7, #28]
		  ST7789_DrawFilledRectangle(posicaoaviao, altura, 18, 8, WHITE);
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	b298      	uxth	r0, r3
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <main+0x1e8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	b299      	uxth	r1, r3
 8001144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2308      	movs	r3, #8
 800114c:	2212      	movs	r2, #18
 800114e:	f7ff ff1b 	bl	8000f88 <ST7789_DrawFilledRectangle>
		  HAL_Delay(40);
 8001152:	2028      	movs	r0, #40	; 0x28
 8001154:	f000 fb7c 	bl	8001850 <HAL_Delay>
	  while(posicaoaviao<=posicaodolancamento-15){
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <main+0x1f8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3b0f      	subs	r3, #15
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	429a      	cmp	r2, r3
 8001162:	dddc      	ble.n	800111e <main+0xfe>
	  }
	  double t=0;
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	f04f 0400 	mov.w	r4, #0
 800116c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  double x = posicaodolancamento+vo*t;
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <main+0x1f8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f93d 	bl	80003f4 <__aeabi_i2d>
 800117a:	4604      	mov	r4, r0
 800117c:	460d      	mov	r5, r1
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <main+0x1f4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f936 	bl	80003f4 <__aeabi_i2d>
 8001188:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800118c:	f7ff f99c 	bl	80004c8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4620      	mov	r0, r4
 8001196:	4629      	mov	r1, r5
 8001198:	f7fe ffe0 	bl	800015c <__adddf3>
 800119c:	4603      	mov	r3, r0
 800119e:	460c      	mov	r4, r1
 80011a0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  double y = altura+(gravidade*t*t)/2;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <main+0x1e8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f923 	bl	80003f4 <__aeabi_i2d>
 80011ae:	4604      	mov	r4, r0
 80011b0:	460d      	mov	r5, r1
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <main+0x1fc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f91c 	bl	80003f4 <__aeabi_i2d>
 80011bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011c0:	f7ff f982 	bl	80004c8 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011d0:	f7ff f97a 	bl	80004c8 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e4:	f7ff fa9a 	bl	800071c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4620      	mov	r0, r4
 80011ee:	4629      	mov	r1, r5
 80011f0:	f7fe ffb4 	bl	800015c <__adddf3>
 80011f4:	4603      	mov	r3, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	e9c7 3400 	strd	r3, r4, [r7]

	  while(t<=tempodequeda){
 80011fc:	e0a3      	b.n	8001346 <main+0x326>
 80011fe:	bf00      	nop
 8001200:	5397829d 	.word	0x5397829d
 8001204:	20000104 	.word	0x20000104
 8001208:	20000000 	.word	0x20000000
 800120c:	66666667 	.word	0x66666667
 8001210:	20000108 	.word	0x20000108
 8001214:	20000004 	.word	0x20000004
 8001218:	200000a8 	.word	0x200000a8
 800121c:	20000008 	.word	0x20000008

		  ST7789_DrawFilledRectangle(posicaoaviao, altura, 18, 8, BLUE);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	b298      	uxth	r0, r3
 8001224:	4b62      	ldr	r3, [pc, #392]	; (80013b0 <main+0x390>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b299      	uxth	r1, r3
 800122a:	231f      	movs	r3, #31
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2308      	movs	r3, #8
 8001230:	2212      	movs	r2, #18
 8001232:	f7ff fea9 	bl	8000f88 <ST7789_DrawFilledRectangle>
		  posicaoaviao+=2;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3302      	adds	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
		  ST7789_DrawFilledRectangle(posicaoaviao, altura, 18, 8, WHITE);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	b298      	uxth	r0, r3
 8001240:	4b5b      	ldr	r3, [pc, #364]	; (80013b0 <main+0x390>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	b299      	uxth	r1, r3
 8001246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2308      	movs	r3, #8
 800124e:	2212      	movs	r2, #18
 8001250:	f7ff fe9a 	bl	8000f88 <ST7789_DrawFilledRectangle>

		  ST7789_DrawFilledRectangle(x, y, 4, 4, BLACK);
 8001254:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001258:	f7ff fc0e 	bl	8000a78 <__aeabi_d2uiz>
 800125c:	4603      	mov	r3, r0
 800125e:	b29c      	uxth	r4, r3
 8001260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001264:	f7ff fc08 	bl	8000a78 <__aeabi_d2uiz>
 8001268:	4603      	mov	r3, r0
 800126a:	b299      	uxth	r1, r3
 800126c:	2300      	movs	r3, #0
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2304      	movs	r3, #4
 8001272:	2204      	movs	r2, #4
 8001274:	4620      	mov	r0, r4
 8001276:	f7ff fe87 	bl	8000f88 <ST7789_DrawFilledRectangle>
		  x = posicaodolancamento+vo*t;
 800127a:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <main+0x394>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f8b8 	bl	80003f4 <__aeabi_i2d>
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <main+0x398>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8b1 	bl	80003f4 <__aeabi_i2d>
 8001292:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001296:	f7ff f917 	bl	80004c8 <__aeabi_dmul>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4620      	mov	r0, r4
 80012a0:	4629      	mov	r1, r5
 80012a2:	f7fe ff5b 	bl	800015c <__adddf3>
 80012a6:	4603      	mov	r3, r0
 80012a8:	460c      	mov	r4, r1
 80012aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
		  y = altura+(10*t*t)/2;
 80012ae:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <main+0x390>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f89e 	bl	80003f4 <__aeabi_i2d>
 80012b8:	4604      	mov	r4, r0
 80012ba:	460d      	mov	r5, r1
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <main+0x39c>)
 80012c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012c6:	f7ff f8ff 	bl	80004c8 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012d6:	f7ff f8f7 	bl	80004c8 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ea:	f7ff fa17 	bl	800071c <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7fe ff31 	bl	800015c <__adddf3>
 80012fa:	4603      	mov	r3, r0
 80012fc:	460c      	mov	r4, r1
 80012fe:	e9c7 3400 	strd	r3, r4, [r7]
		  ST7789_DrawFilledRectangle(x, y, 4, 4, RED);
 8001302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001306:	f7ff fbb7 	bl	8000a78 <__aeabi_d2uiz>
 800130a:	4603      	mov	r3, r0
 800130c:	b29c      	uxth	r4, r3
 800130e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001312:	f7ff fbb1 	bl	8000a78 <__aeabi_d2uiz>
 8001316:	4603      	mov	r3, r0
 8001318:	b299      	uxth	r1, r3
 800131a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2304      	movs	r3, #4
 8001322:	2204      	movs	r2, #4
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fe2f 	bl	8000f88 <ST7789_DrawFilledRectangle>
		  HAL_Delay(40);
 800132a:	2028      	movs	r0, #40	; 0x28
 800132c:	f000 fa90 	bl	8001850 <HAL_Delay>
		  t+=0.2;
 8001330:	a31d      	add	r3, pc, #116	; (adr r3, 80013a8 <main+0x388>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800133a:	f7fe ff0f 	bl	800015c <__adddf3>
 800133e:	4603      	mov	r3, r0
 8001340:	460c      	mov	r4, r1
 8001342:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  while(t<=tempodequeda){
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <main+0x3a0>)
 8001348:	cb18      	ldmia	r3, {r3, r4}
 800134a:	461a      	mov	r2, r3
 800134c:	4623      	mov	r3, r4
 800134e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001352:	f7ff fb35 	bl	80009c0 <__aeabi_dcmple>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f47f af61 	bne.w	8001220 <main+0x200>

	  }
	  while(posicaoaviao<=240){
 800135e:	e01c      	b.n	800139a <main+0x37a>
		  ST7789_DrawFilledRectangle(posicaoaviao, altura, 18, 8, BLUE);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	b298      	uxth	r0, r3
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <main+0x390>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b299      	uxth	r1, r3
 800136a:	231f      	movs	r3, #31
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2308      	movs	r3, #8
 8001370:	2212      	movs	r2, #18
 8001372:	f7ff fe09 	bl	8000f88 <ST7789_DrawFilledRectangle>
		  posicaoaviao+=2;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3302      	adds	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
		  ST7789_DrawFilledRectangle(posicaoaviao, altura, 18, 8, WHITE);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	b298      	uxth	r0, r3
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <main+0x390>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	b299      	uxth	r1, r3
 8001386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2308      	movs	r3, #8
 800138e:	2212      	movs	r2, #18
 8001390:	f7ff fdfa 	bl	8000f88 <ST7789_DrawFilledRectangle>
		  HAL_Delay(40);
 8001394:	2028      	movs	r0, #40	; 0x28
 8001396:	f000 fa5b 	bl	8001850 <HAL_Delay>
	  while(posicaoaviao<=240){
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2bf0      	cmp	r3, #240	; 0xf0
 800139e:	dddf      	ble.n	8001360 <main+0x340>
	  }
	  while(1);
 80013a0:	e7fe      	b.n	80013a0 <main+0x380>
 80013a2:	bf00      	nop
 80013a4:	f3af 8000 	nop.w
 80013a8:	9999999a 	.word	0x9999999a
 80013ac:	3fc99999 	.word	0x3fc99999
 80013b0:	20000000 	.word	0x20000000
 80013b4:	200000a8 	.word	0x200000a8
 80013b8:	20000004 	.word	0x20000004
 80013bc:	40240000 	.word	0x40240000
 80013c0:	20000108 	.word	0x20000108

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b090      	sub	sp, #64	; 0x40
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0318 	add.w	r3, r7, #24
 80013ce:	2228      	movs	r2, #40	; 0x28
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fb2e 	bl	8002a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ee:	2310      	movs	r3, #16
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f2:	2302      	movs	r3, #2
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80013f6:	2300      	movs	r3, #0
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80013fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80013fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fc9b 	bl	8001d40 <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001410:	f000 f8b2 	bl	8001578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	2302      	movs	r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2102      	movs	r1, #2
 800142e:	4618      	mov	r0, r3
 8001430:	f000 ff06 	bl	8002240 <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800143a:	f000 f89d 	bl	8001578 <Error_Handler>
  }
}
 800143e:	bf00      	nop
 8001440:	3740      	adds	r7, #64	; 0x40
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_SPI1_Init+0x64>)
 800144e:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <MX_SPI1_Init+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_SPI1_Init+0x64>)
 8001454:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001458:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_SPI1_Init+0x64>)
 8001468:	2202      	movs	r2, #2
 800146a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_SPI1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_SPI1_Init+0x64>)
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_SPI1_Init+0x64>)
 800147c:	2208      	movs	r2, #8
 800147e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_SPI1_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <MX_SPI1_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_SPI1_Init+0x64>)
 8001494:	220a      	movs	r2, #10
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_SPI1_Init+0x64>)
 800149a:	f001 f83b 	bl	8002514 <HAL_SPI_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014a4:	f000 f868 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200000ac 	.word	0x200000ac
 80014b0:	40013000 	.word	0x40013000

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <MX_GPIO_Init+0xb8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a27      	ldr	r2, [pc, #156]	; (800156c <MX_GPIO_Init+0xb8>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <MX_GPIO_Init+0xb8>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <MX_GPIO_Init+0xb8>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <MX_GPIO_Init+0xb8>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MX_GPIO_Init+0xb8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_CS_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80014fe:	481c      	ldr	r0, [pc, #112]	; (8001570 <MX_GPIO_Init+0xbc>)
 8001500:	f000 fc06 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin|GPIO_PIN_3|GPIO_PIN_4
 8001504:	2200      	movs	r2, #0
 8001506:	217b      	movs	r1, #123	; 0x7b
 8001508:	481a      	ldr	r0, [pc, #104]	; (8001574 <MX_GPIO_Init+0xc0>)
 800150a:	f000 fc01 	bl	8001d10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : ST7789_CS_Pin PA10 */
  GPIO_InitStruct.Pin = ST7789_CS_Pin|GPIO_PIN_10;
 800150e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2302      	movs	r3, #2
 800151e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	4619      	mov	r1, r3
 8001526:	4812      	ldr	r0, [pc, #72]	; (8001570 <MX_GPIO_Init+0xbc>)
 8001528:	f000 fa98 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin|GPIO_PIN_3|GPIO_PIN_4
 800152c:	237b      	movs	r3, #123	; 0x7b
 800152e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2302      	movs	r3, #2
 800153a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4619      	mov	r1, r3
 8001542:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_GPIO_Init+0xc0>)
 8001544:	f000 fa8a 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001548:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800154c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	4619      	mov	r1, r3
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_GPIO_Init+0xbc>)
 800155e:	f000 fa7d 	bl	8001a5c <HAL_GPIO_Init>

}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	40010800 	.word	0x40010800
 8001574:	40010c00 	.word	0x40010c00

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157e:	e7fe      	b.n	800157e <Error_Handler+0x6>

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_MspInit+0x5c>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a14      	ldr	r2, [pc, #80]	; (80015dc <HAL_MspInit+0x5c>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_MspInit+0x5c>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_MspInit+0x5c>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_MspInit+0x5c>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_MspInit+0x5c>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_MspInit+0x60>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_MspInit+0x60>)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010000 	.word	0x40010000

080015e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_SPI_MspInit+0x88>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d12f      	bne.n	8001664 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_SPI_MspInit+0x8c>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a19      	ldr	r2, [pc, #100]	; (8001670 <HAL_SPI_MspInit+0x8c>)
 800160a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_SPI_MspInit+0x8c>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_SPI_MspInit+0x8c>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a13      	ldr	r2, [pc, #76]	; (8001670 <HAL_SPI_MspInit+0x8c>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_SPI_MspInit+0x8c>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001634:	23a0      	movs	r3, #160	; 0xa0
 8001636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	4619      	mov	r1, r3
 8001646:	480b      	ldr	r0, [pc, #44]	; (8001674 <HAL_SPI_MspInit+0x90>)
 8001648:	f000 fa08 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800164c:	2340      	movs	r3, #64	; 0x40
 800164e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	4619      	mov	r1, r3
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_SPI_MspInit+0x90>)
 8001660:	f000 f9fc 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40013000 	.word	0x40013000
 8001670:	40021000 	.word	0x40021000
 8001674:	40010800 	.word	0x40010800

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016be:	f000 f8ab 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f001 f972 	bl	80029e0 <__errno>
 80016fc:	4602      	mov	r2, r0
 80016fe:	230c      	movs	r3, #12
 8001700:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20005000 	.word	0x20005000
 8001728:	00000400 	.word	0x00000400
 800172c:	2000009c 	.word	0x2000009c
 8001730:	20000118 	.word	0x20000118

08001734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	; (8001778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	; (8001784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001766:	f7ff ffe5 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176a:	f001 f93f 	bl	80029ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176e:	f7ff fc57 	bl	8001020 <main>
  bx lr
 8001772:	4770      	bx	lr
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800177c:	08002e80 	.word	0x08002e80
  ldr r2, =_sbss
 8001780:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001784:	20000118 	.word	0x20000118

08001788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>
	...

0800178c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_Init+0x28>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_Init+0x28>)
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 f929 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 f808 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff feea 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40022000 	.word	0x40022000

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f933 	bl	8001a42 <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 f909 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000000c 	.word	0x2000000c
 8001810:	20000014 	.word	0x20000014
 8001814:	20000010 	.word	0x20000010

08001818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_IncTick+0x1c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_IncTick+0x20>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a03      	ldr	r2, [pc, #12]	; (8001838 <HAL_IncTick+0x20>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	20000014 	.word	0x20000014
 8001838:	20000110 	.word	0x20000110

0800183c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b02      	ldr	r3, [pc, #8]	; (800184c <HAL_GetTick+0x10>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	20000110 	.word	0x20000110

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff fff0 	bl	800183c <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_Delay+0x40>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffe0 	bl	800183c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
  {
  }
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000014 	.word	0x20000014

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	; (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff90 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff49 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff5e 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff90 	bl	800194c <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5f 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffb0 	bl	80019b0 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b08b      	sub	sp, #44	; 0x2c
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6e:	e127      	b.n	8001cc0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a70:	2201      	movs	r2, #1
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f040 8116 	bne.w	8001cba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b12      	cmp	r3, #18
 8001a94:	d034      	beq.n	8001b00 <HAL_GPIO_Init+0xa4>
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d80d      	bhi.n	8001ab6 <HAL_GPIO_Init+0x5a>
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d02b      	beq.n	8001af6 <HAL_GPIO_Init+0x9a>
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d804      	bhi.n	8001aac <HAL_GPIO_Init+0x50>
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d031      	beq.n	8001b0a <HAL_GPIO_Init+0xae>
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d01c      	beq.n	8001ae4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aaa:	e048      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d043      	beq.n	8001b38 <HAL_GPIO_Init+0xdc>
 8001ab0:	2b11      	cmp	r3, #17
 8001ab2:	d01b      	beq.n	8001aec <HAL_GPIO_Init+0x90>
          break;
 8001ab4:	e043      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ab6:	4a89      	ldr	r2, [pc, #548]	; (8001cdc <HAL_GPIO_Init+0x280>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d026      	beq.n	8001b0a <HAL_GPIO_Init+0xae>
 8001abc:	4a87      	ldr	r2, [pc, #540]	; (8001cdc <HAL_GPIO_Init+0x280>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d806      	bhi.n	8001ad0 <HAL_GPIO_Init+0x74>
 8001ac2:	4a87      	ldr	r2, [pc, #540]	; (8001ce0 <HAL_GPIO_Init+0x284>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d020      	beq.n	8001b0a <HAL_GPIO_Init+0xae>
 8001ac8:	4a86      	ldr	r2, [pc, #536]	; (8001ce4 <HAL_GPIO_Init+0x288>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d01d      	beq.n	8001b0a <HAL_GPIO_Init+0xae>
          break;
 8001ace:	e036      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ad0:	4a85      	ldr	r2, [pc, #532]	; (8001ce8 <HAL_GPIO_Init+0x28c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d019      	beq.n	8001b0a <HAL_GPIO_Init+0xae>
 8001ad6:	4a85      	ldr	r2, [pc, #532]	; (8001cec <HAL_GPIO_Init+0x290>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d016      	beq.n	8001b0a <HAL_GPIO_Init+0xae>
 8001adc:	4a84      	ldr	r2, [pc, #528]	; (8001cf0 <HAL_GPIO_Init+0x294>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0xae>
          break;
 8001ae2:	e02c      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	623b      	str	r3, [r7, #32]
          break;
 8001aea:	e028      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	3304      	adds	r3, #4
 8001af2:	623b      	str	r3, [r7, #32]
          break;
 8001af4:	e023      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	3308      	adds	r3, #8
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e01e      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	330c      	adds	r3, #12
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e019      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d102      	bne.n	8001b18 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b12:	2304      	movs	r3, #4
 8001b14:	623b      	str	r3, [r7, #32]
          break;
 8001b16:	e012      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b20:	2308      	movs	r3, #8
 8001b22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	611a      	str	r2, [r3, #16]
          break;
 8001b2a:	e008      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	615a      	str	r2, [r3, #20]
          break;
 8001b36:	e002      	b.n	8001b3e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
          break;
 8001b3c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	2bff      	cmp	r3, #255	; 0xff
 8001b42:	d801      	bhi.n	8001b48 <HAL_GPIO_Init+0xec>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	e001      	b.n	8001b4c <HAL_GPIO_Init+0xf0>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2bff      	cmp	r3, #255	; 0xff
 8001b52:	d802      	bhi.n	8001b5a <HAL_GPIO_Init+0xfe>
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x104>
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	3b08      	subs	r3, #8
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	210f      	movs	r1, #15
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	401a      	ands	r2, r3
 8001b72:	6a39      	ldr	r1, [r7, #32]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8096 	beq.w	8001cba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8e:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <HAL_GPIO_Init+0x298>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4a58      	ldr	r2, [pc, #352]	; (8001cf4 <HAL_GPIO_Init+0x298>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6193      	str	r3, [r2, #24]
 8001b9a:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <HAL_GPIO_Init+0x298>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ba6:	4a54      	ldr	r2, [pc, #336]	; (8001cf8 <HAL_GPIO_Init+0x29c>)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4b      	ldr	r2, [pc, #300]	; (8001cfc <HAL_GPIO_Init+0x2a0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0x19e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <HAL_GPIO_Init+0x2a4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_GPIO_Init+0x19a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a49      	ldr	r2, [pc, #292]	; (8001d04 <HAL_GPIO_Init+0x2a8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x196>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a48      	ldr	r2, [pc, #288]	; (8001d08 <HAL_GPIO_Init+0x2ac>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_GPIO_Init+0x192>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x1a0>
 8001bee:	2304      	movs	r3, #4
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x1a0>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x1a0>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x1a0>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c0c:	493a      	ldr	r1, [pc, #232]	; (8001cf8 <HAL_GPIO_Init+0x29c>)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c26:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4938      	ldr	r1, [pc, #224]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
 8001c32:	e006      	b.n	8001c42 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c34:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	4933      	ldr	r1, [pc, #204]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	492e      	ldr	r1, [pc, #184]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
 8001c5a:	e006      	b.n	8001c6a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4929      	ldr	r1, [pc, #164]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c76:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	4924      	ldr	r1, [pc, #144]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
 8001c82:	e006      	b.n	8001c92 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	491f      	ldr	r1, [pc, #124]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	491a      	ldr	r1, [pc, #104]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60cb      	str	r3, [r1, #12]
 8001caa:	e006      	b.n	8001cba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	4915      	ldr	r1, [pc, #84]	; (8001d0c <HAL_GPIO_Init+0x2b0>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f47f aed0 	bne.w	8001a70 <HAL_GPIO_Init+0x14>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	372c      	adds	r7, #44	; 0x2c
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	10210000 	.word	0x10210000
 8001ce0:	10110000 	.word	0x10110000
 8001ce4:	10120000 	.word	0x10120000
 8001ce8:	10310000 	.word	0x10310000
 8001cec:	10320000 	.word	0x10320000
 8001cf0:	10220000 	.word	0x10220000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40010800 	.word	0x40010800
 8001d00:	40010c00 	.word	0x40010c00
 8001d04:	40011000 	.word	0x40011000
 8001d08:	40011400 	.word	0x40011400
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d2c:	e003      	b.n	8001d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d2e:	887b      	ldrh	r3, [r7, #2]
 8001d30:	041a      	lsls	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e26c      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8087 	beq.w	8001e6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d60:	4b92      	ldr	r3, [pc, #584]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d00c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d6c:	4b8f      	ldr	r3, [pc, #572]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d112      	bne.n	8001d9e <HAL_RCC_OscConfig+0x5e>
 8001d78:	4b8c      	ldr	r3, [pc, #560]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d84:	d10b      	bne.n	8001d9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d86:	4b89      	ldr	r3, [pc, #548]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d06c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x12c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d168      	bne.n	8001e6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e246      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x76>
 8001da8:	4b80      	ldr	r3, [pc, #512]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a7f      	ldr	r2, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e02e      	b.n	8001e14 <HAL_RCC_OscConfig+0xd4>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x98>
 8001dbe:	4b7b      	ldr	r3, [pc, #492]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a7a      	ldr	r2, [pc, #488]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b78      	ldr	r3, [pc, #480]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a77      	ldr	r2, [pc, #476]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e01d      	b.n	8001e14 <HAL_RCC_OscConfig+0xd4>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0xbc>
 8001de2:	4b72      	ldr	r3, [pc, #456]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a71      	ldr	r2, [pc, #452]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6e      	ldr	r2, [pc, #440]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0xd4>
 8001dfc:	4b6b      	ldr	r3, [pc, #428]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a6a      	ldr	r2, [pc, #424]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b68      	ldr	r3, [pc, #416]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a67      	ldr	r2, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fd0e 	bl	800183c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fd0a 	bl	800183c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1fa      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b5d      	ldr	r3, [pc, #372]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0xe4>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fcfa 	bl	800183c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fcf6 	bl	800183c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e1e6      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5e:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x10c>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d063      	beq.n	8001f42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e7a:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e86:	4b49      	ldr	r3, [pc, #292]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d11c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x18c>
 8001e92:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	4b43      	ldr	r3, [pc, #268]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x176>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e1ba      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4939      	ldr	r1, [pc, #228]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	e03a      	b.n	8001f42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff fcaf 	bl	800183c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fcab 	bl	800183c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e19b      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4927      	ldr	r1, [pc, #156]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
 8001f14:	e015      	b.n	8001f42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fc8e 	bl	800183c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f24:	f7ff fc8a 	bl	800183c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e17a      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d03a      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d019      	beq.n	8001f8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff fc6e 	bl	800183c <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f64:	f7ff fc6a 	bl	800183c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e15a      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_RCC_OscConfig+0x26c>)
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f000 faa8 	bl	80024d8 <RCC_Delay>
 8001f88:	e01c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f90:	f7ff fc54 	bl	800183c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f96:	e00f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff fc50 	bl	800183c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d908      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e140      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	42420000 	.word	0x42420000
 8001fb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	4b9e      	ldr	r3, [pc, #632]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1e9      	bne.n	8001f98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80a6 	beq.w	800211e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd6:	4b97      	ldr	r3, [pc, #604]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10d      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b94      	ldr	r3, [pc, #592]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a93      	ldr	r2, [pc, #588]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b91      	ldr	r3, [pc, #580]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	4b8e      	ldr	r3, [pc, #568]	; (8002238 <HAL_RCC_OscConfig+0x4f8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200a:	4b8b      	ldr	r3, [pc, #556]	; (8002238 <HAL_RCC_OscConfig+0x4f8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a8a      	ldr	r2, [pc, #552]	; (8002238 <HAL_RCC_OscConfig+0x4f8>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002016:	f7ff fc11 	bl	800183c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201e:	f7ff fc0d 	bl	800183c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	; 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0fd      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	4b81      	ldr	r3, [pc, #516]	; (8002238 <HAL_RCC_OscConfig+0x4f8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x312>
 8002044:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4a7a      	ldr	r2, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6213      	str	r3, [r2, #32]
 8002050:	e02d      	b.n	80020ae <HAL_RCC_OscConfig+0x36e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x334>
 800205a:	4b76      	ldr	r3, [pc, #472]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a75      	ldr	r2, [pc, #468]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	4b73      	ldr	r3, [pc, #460]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a72      	ldr	r2, [pc, #456]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	e01c      	b.n	80020ae <HAL_RCC_OscConfig+0x36e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b05      	cmp	r3, #5
 800207a:	d10c      	bne.n	8002096 <HAL_RCC_OscConfig+0x356>
 800207c:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4a6c      	ldr	r2, [pc, #432]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6213      	str	r3, [r2, #32]
 8002088:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4a69      	ldr	r2, [pc, #420]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6213      	str	r3, [r2, #32]
 8002094:	e00b      	b.n	80020ae <HAL_RCC_OscConfig+0x36e>
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a66      	ldr	r2, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	4b64      	ldr	r3, [pc, #400]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a63      	ldr	r2, [pc, #396]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d015      	beq.n	80020e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fbc1 	bl	800183c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff fbbd 	bl	800183c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0ab      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d4:	4b57      	ldr	r3, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ee      	beq.n	80020be <HAL_RCC_OscConfig+0x37e>
 80020e0:	e014      	b.n	800210c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e2:	f7ff fbab 	bl	800183c <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7ff fba7 	bl	800183c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e095      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002100:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ee      	bne.n	80020ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d105      	bne.n	800211e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002112:	4b48      	ldr	r3, [pc, #288]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a47      	ldr	r2, [pc, #284]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8081 	beq.w	800222a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002128:	4b42      	ldr	r3, [pc, #264]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d061      	beq.n	80021f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d146      	bne.n	80021ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213c:	4b3f      	ldr	r3, [pc, #252]	; (800223c <HAL_RCC_OscConfig+0x4fc>)
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7ff fb7b 	bl	800183c <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7ff fb77 	bl	800183c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e067      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215c:	4b35      	ldr	r3, [pc, #212]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d108      	bne.n	8002184 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002172:	4b30      	ldr	r3, [pc, #192]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	492d      	ldr	r1, [pc, #180]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002184:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a19      	ldr	r1, [r3, #32]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	430b      	orrs	r3, r1
 8002196:	4927      	ldr	r1, [pc, #156]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x4fc>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff fb4b 	bl	800183c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff fb47 	bl	800183c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e037      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x46a>
 80021c8:	e02f      	b.n	800222a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_RCC_OscConfig+0x4fc>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fb34 	bl	800183c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7ff fb30 	bl	800183c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e020      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x498>
 80021f6:	e018      	b.n	800222a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e013      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	429a      	cmp	r2, r3
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	40007000 	.word	0x40007000
 800223c:	42420060 	.word	0x42420060

08002240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0d0      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d910      	bls.n	8002284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 0207 	bic.w	r2, r3, #7
 800226a:	4965      	ldr	r1, [pc, #404]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d040      	beq.n	8002360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e073      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06b      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b39      	ldr	r3, [pc, #228]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4936      	ldr	r1, [pc, #216]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002330:	f7ff fa84 	bl	800183c <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	e00a      	b.n	800234e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7ff fa80 	bl	800183c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e053      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 020c 	and.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d1eb      	bne.n	8002338 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d210      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0207 	bic.w	r2, r3, #7
 8002376:	4922      	ldr	r1, [pc, #136]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4601      	mov	r1, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
 80023e2:	fa21 f303 	lsr.w	r3, r1, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1cc>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x1d0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f9e2 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40022000 	.word	0x40022000
 8002404:	40021000 	.word	0x40021000
 8002408:	08002e60 	.word	0x08002e60
 800240c:	2000000c 	.word	0x2000000c
 8002410:	20000010 	.word	0x20000010

08002414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	b490      	push	{r4, r7}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800241a:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800241c:	1d3c      	adds	r4, r7, #4
 800241e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b04      	cmp	r3, #4
 800244c:	d002      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x40>
 800244e:	2b08      	cmp	r3, #8
 8002450:	d003      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x46>
 8002452:	e02d      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002454:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002456:	623b      	str	r3, [r7, #32]
      break;
 8002458:	e02d      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	0c9b      	lsrs	r3, r3, #18
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002466:	4413      	add	r3, r2
 8002468:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800246c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	0c5b      	lsrs	r3, r3, #17
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002486:	4413      	add	r3, r2
 8002488:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800248c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002492:	fb02 f203 	mul.w	r2, r2, r3
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
 800249e:	e004      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	623b      	str	r3, [r7, #32]
      break;
 80024ae:	e002      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024b2:	623b      	str	r3, [r7, #32]
      break;
 80024b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b6:	6a3b      	ldr	r3, [r7, #32]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3728      	adds	r7, #40	; 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc90      	pop	{r4, r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	08002e4c 	.word	0x08002e4c
 80024c8:	08002e5c 	.word	0x08002e5c
 80024cc:	40021000 	.word	0x40021000
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	003d0900 	.word	0x003d0900

080024d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <RCC_Delay+0x34>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <RCC_Delay+0x38>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0a5b      	lsrs	r3, r3, #9
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024f4:	bf00      	nop
  }
  while (Delay --);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	60fa      	str	r2, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f9      	bne.n	80024f4 <RCC_Delay+0x1c>
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	2000000c 	.word	0x2000000c
 8002510:	10624dd3 	.word	0x10624dd3

08002514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e076      	b.n	8002614 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002536:	d009      	beq.n	800254c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
 800253e:	e005      	b.n	800254c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff f83c 	bl	80015e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002582:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	0c1a      	lsrs	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f002 0204 	and.w	r2, r2, #4
 80025f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002602:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_SPI_Transmit+0x22>
 800263a:	2302      	movs	r3, #2
 800263c:	e126      	b.n	800288c <HAL_SPI_Transmit+0x270>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002646:	f7ff f8f9 	bl	800183c <HAL_GetTick>
 800264a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d002      	beq.n	8002662 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800265c:	2302      	movs	r3, #2
 800265e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002660:	e10b      	b.n	800287a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_SPI_Transmit+0x52>
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002672:	e102      	b.n	800287a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2203      	movs	r2, #3
 8002678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	88fa      	ldrh	r2, [r7, #6]
 800268c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ba:	d10f      	bne.n	80026dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d007      	beq.n	80026fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002702:	d14b      	bne.n	800279c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_SPI_Transmit+0xf6>
 800270c:	8afb      	ldrh	r3, [r7, #22]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d13e      	bne.n	8002790 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	881a      	ldrh	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	1c9a      	adds	r2, r3, #2
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002736:	e02b      	b.n	8002790 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d112      	bne.n	800276c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	881a      	ldrh	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	1c9a      	adds	r2, r3, #2
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	86da      	strh	r2, [r3, #54]	; 0x36
 800276a:	e011      	b.n	8002790 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800276c:	f7ff f866 	bl	800183c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d803      	bhi.n	8002784 <HAL_SPI_Transmit+0x168>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002782:	d102      	bne.n	800278a <HAL_SPI_Transmit+0x16e>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800278e:	e074      	b.n	800287a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ce      	bne.n	8002738 <HAL_SPI_Transmit+0x11c>
 800279a:	e04c      	b.n	8002836 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_SPI_Transmit+0x18e>
 80027a4:	8afb      	ldrh	r3, [r7, #22]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d140      	bne.n	800282c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	330c      	adds	r3, #12
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027d0:	e02c      	b.n	800282c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d113      	bne.n	8002808 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	7812      	ldrb	r2, [r2, #0]
 80027ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	86da      	strh	r2, [r3, #54]	; 0x36
 8002806:	e011      	b.n	800282c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002808:	f7ff f818 	bl	800183c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d803      	bhi.n	8002820 <HAL_SPI_Transmit+0x204>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d102      	bne.n	8002826 <HAL_SPI_Transmit+0x20a>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d102      	bne.n	800282c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	77fb      	strb	r3, [r7, #31]
          goto error;
 800282a:	e026      	b.n	800287a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1cd      	bne.n	80027d2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f8b2 	bl	80029a4 <SPI_EndRxTxTransaction>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	77fb      	strb	r3, [r7, #31]
 8002876:	e000      	b.n	800287a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002878:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800288a:	7ffb      	ldrb	r3, [r7, #31]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028a4:	f7fe ffca 	bl	800183c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028b4:	f7fe ffc2 	bl	800183c <HAL_GetTick>
 80028b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	015b      	lsls	r3, r3, #5
 80028c0:	0d1b      	lsrs	r3, r3, #20
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ca:	e054      	b.n	8002976 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d050      	beq.n	8002976 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028d4:	f7fe ffb2 	bl	800183c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d902      	bls.n	80028ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d13d      	bne.n	8002966 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002902:	d111      	bne.n	8002928 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290c:	d004      	beq.n	8002918 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d107      	bne.n	8002928 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002926:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002930:	d10f      	bne.n	8002952 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002950:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e017      	b.n	8002996 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3b01      	subs	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	429a      	cmp	r2, r3
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d19b      	bne.n	80028cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000000c 	.word	0x2000000c

080029a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2200      	movs	r2, #0
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f7ff ff6a 	bl	8002894 <SPI_WaitFlagStateUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f043 0220 	orr.w	r2, r3, #32
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e000      	b.n	80029d8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <__errno>:
 80029e0:	4b01      	ldr	r3, [pc, #4]	; (80029e8 <__errno+0x8>)
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000018 	.word	0x20000018

080029ec <__libc_init_array>:
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	2500      	movs	r5, #0
 80029f0:	4e0c      	ldr	r6, [pc, #48]	; (8002a24 <__libc_init_array+0x38>)
 80029f2:	4c0d      	ldr	r4, [pc, #52]	; (8002a28 <__libc_init_array+0x3c>)
 80029f4:	1ba4      	subs	r4, r4, r6
 80029f6:	10a4      	asrs	r4, r4, #2
 80029f8:	42a5      	cmp	r5, r4
 80029fa:	d109      	bne.n	8002a10 <__libc_init_array+0x24>
 80029fc:	f000 f9bc 	bl	8002d78 <_init>
 8002a00:	2500      	movs	r5, #0
 8002a02:	4e0a      	ldr	r6, [pc, #40]	; (8002a2c <__libc_init_array+0x40>)
 8002a04:	4c0a      	ldr	r4, [pc, #40]	; (8002a30 <__libc_init_array+0x44>)
 8002a06:	1ba4      	subs	r4, r4, r6
 8002a08:	10a4      	asrs	r4, r4, #2
 8002a0a:	42a5      	cmp	r5, r4
 8002a0c:	d105      	bne.n	8002a1a <__libc_init_array+0x2e>
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
 8002a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a14:	4798      	blx	r3
 8002a16:	3501      	adds	r5, #1
 8002a18:	e7ee      	b.n	80029f8 <__libc_init_array+0xc>
 8002a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a1e:	4798      	blx	r3
 8002a20:	3501      	adds	r5, #1
 8002a22:	e7f2      	b.n	8002a0a <__libc_init_array+0x1e>
 8002a24:	08002e78 	.word	0x08002e78
 8002a28:	08002e78 	.word	0x08002e78
 8002a2c:	08002e78 	.word	0x08002e78
 8002a30:	08002e7c 	.word	0x08002e7c

08002a34 <memset>:
 8002a34:	4603      	mov	r3, r0
 8002a36:	4402      	add	r2, r0
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d100      	bne.n	8002a3e <memset+0xa>
 8002a3c:	4770      	bx	lr
 8002a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a42:	e7f9      	b.n	8002a38 <memset+0x4>

08002a44 <srand>:
 8002a44:	b538      	push	{r3, r4, r5, lr}
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <srand+0x38>)
 8002a48:	4605      	mov	r5, r0
 8002a4a:	681c      	ldr	r4, [r3, #0]
 8002a4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a4e:	b97b      	cbnz	r3, 8002a70 <srand+0x2c>
 8002a50:	2018      	movs	r0, #24
 8002a52:	f000 f81b 	bl	8002a8c <malloc>
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <srand+0x3c>)
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <srand+0x40>)
 8002a5a:	63a0      	str	r0, [r4, #56]	; 0x38
 8002a5c:	e9c0 2300 	strd	r2, r3, [r0]
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <srand+0x44>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	6083      	str	r3, [r0, #8]
 8002a66:	230b      	movs	r3, #11
 8002a68:	8183      	strh	r3, [r0, #12]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002a70:	2200      	movs	r2, #0
 8002a72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a74:	611d      	str	r5, [r3, #16]
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	bd38      	pop	{r3, r4, r5, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000018 	.word	0x20000018
 8002a80:	abcd330e 	.word	0xabcd330e
 8002a84:	e66d1234 	.word	0xe66d1234
 8002a88:	0005deec 	.word	0x0005deec

08002a8c <malloc>:
 8002a8c:	4b02      	ldr	r3, [pc, #8]	; (8002a98 <malloc+0xc>)
 8002a8e:	4601      	mov	r1, r0
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	f000 b803 	b.w	8002a9c <_malloc_r>
 8002a96:	bf00      	nop
 8002a98:	20000018 	.word	0x20000018

08002a9c <_malloc_r>:
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	1ccd      	adds	r5, r1, #3
 8002aa0:	f025 0503 	bic.w	r5, r5, #3
 8002aa4:	3508      	adds	r5, #8
 8002aa6:	2d0c      	cmp	r5, #12
 8002aa8:	bf38      	it	cc
 8002aaa:	250c      	movcc	r5, #12
 8002aac:	2d00      	cmp	r5, #0
 8002aae:	4606      	mov	r6, r0
 8002ab0:	db01      	blt.n	8002ab6 <_malloc_r+0x1a>
 8002ab2:	42a9      	cmp	r1, r5
 8002ab4:	d903      	bls.n	8002abe <_malloc_r+0x22>
 8002ab6:	230c      	movs	r3, #12
 8002ab8:	6033      	str	r3, [r6, #0]
 8002aba:	2000      	movs	r0, #0
 8002abc:	bd70      	pop	{r4, r5, r6, pc}
 8002abe:	f000 f857 	bl	8002b70 <__malloc_lock>
 8002ac2:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <_malloc_r+0xac>)
 8002ac4:	6814      	ldr	r4, [r2, #0]
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	b991      	cbnz	r1, 8002af0 <_malloc_r+0x54>
 8002aca:	4c20      	ldr	r4, [pc, #128]	; (8002b4c <_malloc_r+0xb0>)
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	b91b      	cbnz	r3, 8002ad8 <_malloc_r+0x3c>
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	f000 f83d 	bl	8002b50 <_sbrk_r>
 8002ad6:	6020      	str	r0, [r4, #0]
 8002ad8:	4629      	mov	r1, r5
 8002ada:	4630      	mov	r0, r6
 8002adc:	f000 f838 	bl	8002b50 <_sbrk_r>
 8002ae0:	1c43      	adds	r3, r0, #1
 8002ae2:	d124      	bne.n	8002b2e <_malloc_r+0x92>
 8002ae4:	230c      	movs	r3, #12
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	6033      	str	r3, [r6, #0]
 8002aea:	f000 f842 	bl	8002b72 <__malloc_unlock>
 8002aee:	e7e4      	b.n	8002aba <_malloc_r+0x1e>
 8002af0:	680b      	ldr	r3, [r1, #0]
 8002af2:	1b5b      	subs	r3, r3, r5
 8002af4:	d418      	bmi.n	8002b28 <_malloc_r+0x8c>
 8002af6:	2b0b      	cmp	r3, #11
 8002af8:	d90f      	bls.n	8002b1a <_malloc_r+0x7e>
 8002afa:	600b      	str	r3, [r1, #0]
 8002afc:	18cc      	adds	r4, r1, r3
 8002afe:	50cd      	str	r5, [r1, r3]
 8002b00:	4630      	mov	r0, r6
 8002b02:	f000 f836 	bl	8002b72 <__malloc_unlock>
 8002b06:	f104 000b 	add.w	r0, r4, #11
 8002b0a:	1d23      	adds	r3, r4, #4
 8002b0c:	f020 0007 	bic.w	r0, r0, #7
 8002b10:	1ac3      	subs	r3, r0, r3
 8002b12:	d0d3      	beq.n	8002abc <_malloc_r+0x20>
 8002b14:	425a      	negs	r2, r3
 8002b16:	50e2      	str	r2, [r4, r3]
 8002b18:	e7d0      	b.n	8002abc <_malloc_r+0x20>
 8002b1a:	684b      	ldr	r3, [r1, #4]
 8002b1c:	428c      	cmp	r4, r1
 8002b1e:	bf16      	itet	ne
 8002b20:	6063      	strne	r3, [r4, #4]
 8002b22:	6013      	streq	r3, [r2, #0]
 8002b24:	460c      	movne	r4, r1
 8002b26:	e7eb      	b.n	8002b00 <_malloc_r+0x64>
 8002b28:	460c      	mov	r4, r1
 8002b2a:	6849      	ldr	r1, [r1, #4]
 8002b2c:	e7cc      	b.n	8002ac8 <_malloc_r+0x2c>
 8002b2e:	1cc4      	adds	r4, r0, #3
 8002b30:	f024 0403 	bic.w	r4, r4, #3
 8002b34:	42a0      	cmp	r0, r4
 8002b36:	d005      	beq.n	8002b44 <_malloc_r+0xa8>
 8002b38:	1a21      	subs	r1, r4, r0
 8002b3a:	4630      	mov	r0, r6
 8002b3c:	f000 f808 	bl	8002b50 <_sbrk_r>
 8002b40:	3001      	adds	r0, #1
 8002b42:	d0cf      	beq.n	8002ae4 <_malloc_r+0x48>
 8002b44:	6025      	str	r5, [r4, #0]
 8002b46:	e7db      	b.n	8002b00 <_malloc_r+0x64>
 8002b48:	200000a0 	.word	0x200000a0
 8002b4c:	200000a4 	.word	0x200000a4

08002b50 <_sbrk_r>:
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	2300      	movs	r3, #0
 8002b54:	4c05      	ldr	r4, [pc, #20]	; (8002b6c <_sbrk_r+0x1c>)
 8002b56:	4605      	mov	r5, r0
 8002b58:	4608      	mov	r0, r1
 8002b5a:	6023      	str	r3, [r4, #0]
 8002b5c:	f7fe fdb4 	bl	80016c8 <_sbrk>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d102      	bne.n	8002b6a <_sbrk_r+0x1a>
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	b103      	cbz	r3, 8002b6a <_sbrk_r+0x1a>
 8002b68:	602b      	str	r3, [r5, #0]
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	20000114 	.word	0x20000114

08002b70 <__malloc_lock>:
 8002b70:	4770      	bx	lr

08002b72 <__malloc_unlock>:
 8002b72:	4770      	bx	lr

08002b74 <sqrt>:
 8002b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b78:	b08b      	sub	sp, #44	; 0x2c
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	460d      	mov	r5, r1
 8002b7e:	f000 f84d 	bl	8002c1c <__ieee754_sqrt>
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <sqrt+0xa0>)
 8002b84:	4680      	mov	r8, r0
 8002b86:	f993 a000 	ldrsb.w	sl, [r3]
 8002b8a:	4689      	mov	r9, r1
 8002b8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002b90:	d02b      	beq.n	8002bea <sqrt+0x76>
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	4620      	mov	r0, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f7fd ff2f 	bl	80009fc <__aeabi_dcmpun>
 8002b9e:	4683      	mov	fp, r0
 8002ba0:	bb18      	cbnz	r0, 8002bea <sqrt+0x76>
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	2700      	movs	r7, #0
 8002ba6:	4632      	mov	r2, r6
 8002ba8:	463b      	mov	r3, r7
 8002baa:	4620      	mov	r0, r4
 8002bac:	4629      	mov	r1, r5
 8002bae:	f7fd fefd 	bl	80009ac <__aeabi_dcmplt>
 8002bb2:	b1d0      	cbz	r0, 8002bea <sqrt+0x76>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <sqrt+0xa4>)
 8002bba:	f8cd b020 	str.w	fp, [sp, #32]
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002bc4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002bc8:	f1ba 0f00 	cmp.w	sl, #0
 8002bcc:	d112      	bne.n	8002bf4 <sqrt+0x80>
 8002bce:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002bd2:	4668      	mov	r0, sp
 8002bd4:	f000 f8ce 	bl	8002d74 <matherr>
 8002bd8:	b1b8      	cbz	r0, 8002c0a <sqrt+0x96>
 8002bda:	9b08      	ldr	r3, [sp, #32]
 8002bdc:	b11b      	cbz	r3, 8002be6 <sqrt+0x72>
 8002bde:	f7ff feff 	bl	80029e0 <__errno>
 8002be2:	9b08      	ldr	r3, [sp, #32]
 8002be4:	6003      	str	r3, [r0, #0]
 8002be6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8002bea:	4640      	mov	r0, r8
 8002bec:	4649      	mov	r1, r9
 8002bee:	b00b      	add	sp, #44	; 0x2c
 8002bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bf4:	4632      	mov	r2, r6
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	4639      	mov	r1, r7
 8002bfc:	f7fd fd8e 	bl	800071c <__aeabi_ddiv>
 8002c00:	f1ba 0f02 	cmp.w	sl, #2
 8002c04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002c08:	d1e3      	bne.n	8002bd2 <sqrt+0x5e>
 8002c0a:	f7ff fee9 	bl	80029e0 <__errno>
 8002c0e:	2321      	movs	r3, #33	; 0x21
 8002c10:	6003      	str	r3, [r0, #0]
 8002c12:	e7e2      	b.n	8002bda <sqrt+0x66>
 8002c14:	2000007c 	.word	0x2000007c
 8002c18:	08002e70 	.word	0x08002e70

08002c1c <__ieee754_sqrt>:
 8002c1c:	4b54      	ldr	r3, [pc, #336]	; (8002d70 <__ieee754_sqrt+0x154>)
 8002c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c22:	438b      	bics	r3, r1
 8002c24:	4606      	mov	r6, r0
 8002c26:	460d      	mov	r5, r1
 8002c28:	460a      	mov	r2, r1
 8002c2a:	460c      	mov	r4, r1
 8002c2c:	d10f      	bne.n	8002c4e <__ieee754_sqrt+0x32>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	f7fd fc49 	bl	80004c8 <__aeabi_dmul>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	f7fd fa8d 	bl	800015c <__adddf3>
 8002c42:	4606      	mov	r6, r0
 8002c44:	460d      	mov	r5, r1
 8002c46:	4630      	mov	r0, r6
 8002c48:	4629      	mov	r1, r5
 8002c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c4e:	2900      	cmp	r1, #0
 8002c50:	4607      	mov	r7, r0
 8002c52:	4603      	mov	r3, r0
 8002c54:	dc0e      	bgt.n	8002c74 <__ieee754_sqrt+0x58>
 8002c56:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8002c5a:	ea5c 0707 	orrs.w	r7, ip, r7
 8002c5e:	d0f2      	beq.n	8002c46 <__ieee754_sqrt+0x2a>
 8002c60:	b141      	cbz	r1, 8002c74 <__ieee754_sqrt+0x58>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	f7fd fa77 	bl	8000158 <__aeabi_dsub>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	f7fd fd55 	bl	800071c <__aeabi_ddiv>
 8002c72:	e7e6      	b.n	8002c42 <__ieee754_sqrt+0x26>
 8002c74:	1512      	asrs	r2, r2, #20
 8002c76:	d074      	beq.n	8002d62 <__ieee754_sqrt+0x146>
 8002c78:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002c7c:	07d5      	lsls	r5, r2, #31
 8002c7e:	f04f 0500 	mov.w	r5, #0
 8002c82:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002c86:	bf48      	it	mi
 8002c88:	0fd9      	lsrmi	r1, r3, #31
 8002c8a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8002c8e:	bf44      	itt	mi
 8002c90:	005b      	lslmi	r3, r3, #1
 8002c92:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8002c96:	1051      	asrs	r1, r2, #1
 8002c98:	0fda      	lsrs	r2, r3, #31
 8002c9a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	2216      	movs	r2, #22
 8002ca2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	1987      	adds	r7, r0, r6
 8002caa:	42a7      	cmp	r7, r4
 8002cac:	bfde      	ittt	le
 8002cae:	19b8      	addle	r0, r7, r6
 8002cb0:	1be4      	suble	r4, r4, r7
 8002cb2:	19ad      	addle	r5, r5, r6
 8002cb4:	0fdf      	lsrs	r7, r3, #31
 8002cb6:	3a01      	subs	r2, #1
 8002cb8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8002cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002cc0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8002cc4:	d1f0      	bne.n	8002ca8 <__ieee754_sqrt+0x8c>
 8002cc6:	f04f 0c20 	mov.w	ip, #32
 8002cca:	4696      	mov	lr, r2
 8002ccc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8002cd0:	4284      	cmp	r4, r0
 8002cd2:	eb06 070e 	add.w	r7, r6, lr
 8002cd6:	dc02      	bgt.n	8002cde <__ieee754_sqrt+0xc2>
 8002cd8:	d112      	bne.n	8002d00 <__ieee754_sqrt+0xe4>
 8002cda:	429f      	cmp	r7, r3
 8002cdc:	d810      	bhi.n	8002d00 <__ieee754_sqrt+0xe4>
 8002cde:	2f00      	cmp	r7, #0
 8002ce0:	eb07 0e06 	add.w	lr, r7, r6
 8002ce4:	da42      	bge.n	8002d6c <__ieee754_sqrt+0x150>
 8002ce6:	f1be 0f00 	cmp.w	lr, #0
 8002cea:	db3f      	blt.n	8002d6c <__ieee754_sqrt+0x150>
 8002cec:	f100 0801 	add.w	r8, r0, #1
 8002cf0:	1a24      	subs	r4, r4, r0
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	429f      	cmp	r7, r3
 8002cf6:	bf88      	it	hi
 8002cf8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8002cfc:	1bdb      	subs	r3, r3, r7
 8002cfe:	4432      	add	r2, r6
 8002d00:	0064      	lsls	r4, r4, #1
 8002d02:	f1bc 0c01 	subs.w	ip, ip, #1
 8002d06:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8002d0a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8002d0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002d12:	d1dd      	bne.n	8002cd0 <__ieee754_sqrt+0xb4>
 8002d14:	4323      	orrs	r3, r4
 8002d16:	d006      	beq.n	8002d26 <__ieee754_sqrt+0x10a>
 8002d18:	1c54      	adds	r4, r2, #1
 8002d1a:	bf0b      	itete	eq
 8002d1c:	4662      	moveq	r2, ip
 8002d1e:	3201      	addne	r2, #1
 8002d20:	3501      	addeq	r5, #1
 8002d22:	f022 0201 	bicne.w	r2, r2, #1
 8002d26:	106b      	asrs	r3, r5, #1
 8002d28:	0852      	lsrs	r2, r2, #1
 8002d2a:	07e8      	lsls	r0, r5, #31
 8002d2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002d30:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002d34:	bf48      	it	mi
 8002d36:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8002d3a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8002d3e:	4616      	mov	r6, r2
 8002d40:	e781      	b.n	8002c46 <__ieee754_sqrt+0x2a>
 8002d42:	0adc      	lsrs	r4, r3, #11
 8002d44:	3915      	subs	r1, #21
 8002d46:	055b      	lsls	r3, r3, #21
 8002d48:	2c00      	cmp	r4, #0
 8002d4a:	d0fa      	beq.n	8002d42 <__ieee754_sqrt+0x126>
 8002d4c:	02e6      	lsls	r6, r4, #11
 8002d4e:	d50a      	bpl.n	8002d66 <__ieee754_sqrt+0x14a>
 8002d50:	f1c2 0020 	rsb	r0, r2, #32
 8002d54:	fa23 f000 	lsr.w	r0, r3, r0
 8002d58:	1e55      	subs	r5, r2, #1
 8002d5a:	4093      	lsls	r3, r2
 8002d5c:	4304      	orrs	r4, r0
 8002d5e:	1b4a      	subs	r2, r1, r5
 8002d60:	e78a      	b.n	8002c78 <__ieee754_sqrt+0x5c>
 8002d62:	4611      	mov	r1, r2
 8002d64:	e7f0      	b.n	8002d48 <__ieee754_sqrt+0x12c>
 8002d66:	0064      	lsls	r4, r4, #1
 8002d68:	3201      	adds	r2, #1
 8002d6a:	e7ef      	b.n	8002d4c <__ieee754_sqrt+0x130>
 8002d6c:	4680      	mov	r8, r0
 8002d6e:	e7bf      	b.n	8002cf0 <__ieee754_sqrt+0xd4>
 8002d70:	7ff00000 	.word	0x7ff00000

08002d74 <matherr>:
 8002d74:	2000      	movs	r0, #0
 8002d76:	4770      	bx	lr

08002d78 <_init>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr

08002d84 <_fini>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr
