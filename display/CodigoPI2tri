/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ST7789\ST7789.h"
#include "math.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
int armazenamento[3][6];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
double calculardistancia(int h, int vo, double cd, int area, int massa);
void Simular(int posicaoLancamento,int h, int vo, double cd, int area, int massa,int forma);
void Inicializar(int* altura,int* vo, int* massa,int* area,int* vento, int* alvo);
void Configurar(double*cd, int* forma,int* altura,int* vo,int* vento,int* massa, int* area);
int Avaliar(int alvo, double alcance, int* altura, int* posicaoLancamento);
void Registrar(int i,int altura,int massa,int vo,int vento,int alvo, int posicaoLancamento);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  ST7789_Init();
  /* USER CODE END 2 */
 ST7789_Fill_Color(BLUE);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i = 0 ; i <3;i++)
	  {
		  int altura;
		  int vo;
		  int massa;
		  int area;
		  int vento;
		  int alvo;
		  double cd;
		  int forma=0;
		  Inicializar(&altura,&vo,&massa,&area,&vento,&alvo);
		  Configurar(&cd,&forma,&altura,&vo,&vento,&massa,&area);
		  ST7789_DrawFilledRectangle(alvo, 235, 7, 5, YELLOW);
		  double alcance = calculardistancia(altura, vo, cd,area, massa);
		  int posicaoLancamento;
		  int possivel = Avaliar(alvo, alcance, &altura,&posicaoLancamento);

		  if (posicaoLancamento==-1){
			  Registrar(i,altura, massa, vo, vento,alvo,posicaoLancamento);
		  }
		  else
		  {
			  Simular(posicaoLancamento,altura,vo,cd,area,massa,forma);
			  Registrar(i,altura, massa, vo, vento,alvo,possivel);
		  }
		  ST7789_Fill_Color(BLUE);
	  }




  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void Inicializar(int* altura,int* vo, int* massa,int* area,int* vento, int* alvo)
{
	*altura = srand()%40 +100;
	*vo = srand()%50 +10;
	*massa = srand()%50+5;
	*area = srand()%10;
	*vento = srand()%20;
	*alvo = srand()%100 +100;

}
void Configurar(double* cd,int* forma,int* altura,int* vo,int* vento, int* massa, int* area)
{
	char numero[2];
	*forma = 1;
	ST7789_Fill_Color(BLUE);
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==1)
	{
		ST7789_WriteString(20,20, "Forma:", Font_11x18, WHITE, BLUE);
		ST7789_WriteString(10,100, "Esfera", Font_11x18, WHITE, BLUE);
		ST7789_WriteString(90,100, "Quadrado", Font_11x18, WHITE, BLUE);
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==0){
			*forma++;
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==0){
			*forma --;
		}
		if(*forma <= 1){
			ST7789_DrawFilledRectangle(20, 120, 50, 5, WHITE);
			ST7789_DrawFilledRectangle(100, 120, 50, 5, BLUE);
			*forma = 1;
		}else{
			ST7789_DrawFilledRectangle(100, 120, 50, 5, WHITE);
			ST7789_DrawFilledRectangle(20, 120, 50, 5, BLUE);
			*forma = 2;
		}
		HAL_Delay(100);
	}

	if (*forma ==1 ){
		*cd = 0.47;
	}else{
		*cd = 1.05;
	}
	HAL_Delay(300);
	ST7789_Fill_Color(BLUE);
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==1)
	{
		ST7789_WriteString(20,20, "Velocidado Vento:", Font_11x18, WHITE, BLUE);

		itoa(*vento, numero,10);
		ST7789_WriteString(100, 100, numero, Font_16x26, WHITE, BLUE);

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==0){
			*vento= *vento + 5;
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==0){
			*vento= *vento - 5;
		}
		HAL_Delay(100);
		if(*vento >70) *vento = 70;
	}
	ST7789_Fill_Color(BLUE);
	HAL_Delay(300);
	int direcao = 1;
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==1)
	{
		ST7789_WriteString(20,20, "Direcao Vento:", Font_11x18, WHITE, BLUE);
		ST7789_WriteString(10,100, "Direita", Font_11x18, WHITE, BLUE);
		ST7789_WriteString(100,100, "Esquerda", Font_11x18, WHITE, BLUE);
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==0){
			direcao++;
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==0){
			direcao --;
		}
		if(direcao <= 1){
			ST7789_DrawFilledRectangle(20, 120, 50, 5, WHITE);
			ST7789_DrawFilledRectangle(100, 120, 50, 5, BLUE);
			direcao = 1;
		}else{
			ST7789_DrawFilledRectangle(100, 120, 50, 5, WHITE);
			ST7789_DrawFilledRectangle(20, 120, 50, 5, BLUE);
			direcao = 2;
		}
		HAL_Delay(100);
	}
	if(direcao == 1){
		*vo = *vo+*vento;
	}else{
		*vo = *vo-*vento;
	}
	HAL_Delay(300);
	ST7789_Fill_Color(BLUE);
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==1)
	{
		ST7789_WriteString(20,20, "Massa:", Font_11x18, WHITE, BLUE);

		itoa(*massa, numero,10);
		ST7789_WriteString(100, 100, numero, Font_16x26, WHITE, BLUE);

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==0){
			*massa= *massa + 5;
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==0){
			*massa= *massa - 5;
		}
		HAL_Delay(100);
		if(*massa >70) *massa = 70;
	}
	HAL_Delay(300);
	ST7789_Fill_Color(BLUE);
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==1)
	{
		ST7789_WriteString(20,20, "Altura:", Font_11x18, WHITE, BLUE);

		itoa(*altura, numero,10);
		ST7789_WriteString(100, 100, numero, Font_16x26, WHITE, BLUE);

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==0){
			*altura= *altura + 5;
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==0){
			*altura= *altura - 5;
		}
		HAL_Delay(100);
		if(*altura >240) *altura = 240;
	}
	*altura = 240 - *altura;
	HAL_Delay(300);
	ST7789_Fill_Color(BLUE);
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==1)
	{
		ST7789_WriteString(20,20, "Area:", Font_11x18, WHITE, BLUE);
		itoa(*area, numero,10);
		ST7789_WriteString(100, 100, numero, Font_16x26, WHITE, BLUE);

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==0){
			*area= *area + 1;
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==0){
			*area= *area - 1;
		}
		HAL_Delay(100);
		if(*area >20) *area = 20;
	}
	ST7789_Fill_Color(BLUE);
}
int Avaliar(int alvo, double alcance,int* altura, int*posicaoLancamento){
	if(altura<240){
		return -1;
	}
 	int distancia = alvo - alcance;
	if(distancia <0 && alvo-alcance<240){
		return -1;
	}else{
		*posicaoLancamento = distancia;
	}
}
double calculardistancia(int h, int vo, double cd, int area, int massa)
{
    double x = 0;
    double y = h;
    double vx = vo;
    double vy = 0.0;
    double k = 0.5 * 1.225 * cd * area;
    double t = 0.0;
    while (y < 240) {
        double v = sqrt(vx * vx + vy * vy);

        double Fdx = -k * v * vx;
        double Fdy = -k * v * vy;

        double ax = Fdx / massa;
        double ay = (-massa * 9.81 + Fdy) / massa;

        vx += ax * 0.1;
        vy += ay * 0.1;
        x += vx * 0.1;
        y -= vy * 0.1;
        t += 0.1;
        if (t > 60.0) break; // segurança
    }
    return x;
}

void Simular(int posicaoLancamento,int h, int vo, double cd, int area, int massa,int forma){
    double x = posicaoLancamento;
    double y = h;
    double vx = vo;
    double vy= 0.0;
    double k = 0.5 * 1.225 * cd * area;
    double t = 0.0;
    int posicaoaviao = 0;
    while(posicaoaviao<x){
    	ST7789_DrawFilledRectangle(posicaoaviao, h-4, 12, 8, BLUE);
    	posicaoaviao ++;
    	ST7789_DrawFilledRectangle(posicaoaviao, h-4, 12, 8, WHITE);
    	HAL_Delay(50);
    }

    while (y <235) {
    	int xobj = x;
    	int yobj = y;
        double v = sqrt(vx * vx + vy * vy);
        double Fdx = -k * v * vx;
        double Fdy = -k * v * vy;
        double ax = Fdx / massa;
        double ay = (-massa * 9.81 + Fdy) / massa;
        if(forma == 1){
        	ST7789_DrawFilledRectangle(xobj, yobj, 4, 4, BLACK);
        }else{
        	ST7789_DrawFilledCircle(xobj, yobj, 4, BLACK);
        }
        vx += ax * 0.1;
        vy += ay * 0.1;
        x += vx * 0.1;
        y -= vy * 0.1;
        t += 0.1;
        xobj = x;
        yobj = y;
        if(forma == 1){
        	ST7789_DrawFilledRectangle(xobj, yobj, 4, 4, RED);
        }else{
        	ST7789_DrawFilledCircle(xobj, yobj, 4, BLACK);
        }
        ST7789_DrawFilledRectangle(posicaoaviao, h-4, 12, 8, BLUE);
        posicaoaviao ++;
        ST7789_DrawFilledRectangle(posicaoaviao, h-4, 12, 8, WHITE);
        HAL_Delay(50);
        if (t > 60.0) break; // segurança
    }
    while(posicaoaviao<240){
        	ST7789_DrawFilledRectangle(posicaoaviao, h-4, 12, 8, BLUE);
        	posicaoaviao ++;
        	ST7789_DrawFilledRectangle(posicaoaviao, h-4, 12, 8, WHITE);
        	HAL_Delay(50);
        }

}
void Registrar(int tentativa,int altura,int massa,int vo,int vento,int alvo,int possivel)
{
	armazenamento[tentativa][0]= altura;
	armazenamento[tentativa][1]= massa;
	armazenamento[tentativa][2]= vo-vento;
	armazenamento[tentativa][3]= vento;
	armazenamento[tentativa][4]= alvo;
	armazenamento[tentativa][5]= possivel;
}
void Resumo(){
	ST7789_WriteString(20,20, "Teste 1:", Font_11x18, WHITE, BLUE);
	ST7789_WriteString(10,40, "Vento", Font_11x18, WHITE, BLUE);
	ST7789_WriteString(40,40, "Massa", Font_11x18, WHITE, BLUE);
	ST7789_WriteString(70,40, "Velocidade", Font_11x18, WHITE, BLUE);
	ST7789_WriteString(10,80, "Altura", Font_11x18, WHITE, BLUE);
	ST7789_WriteString(30,80, "Alvo", Font_11x18, WHITE, BLUE);
	for(int j = 0; j <3; i++){
		for(int i= 0 ; i <6;i++){
			char numero[3];
			itoa(armazenamento[j][i], numero,10);

		}
	}


}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
